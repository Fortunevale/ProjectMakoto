{
	// Place your ProjectIchigo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"TaskAdd": {
		"prefix": "taskadd",
		"body": [
			"$0Task.Run(async () =>",
			"{",
			"    $TM_SELECTED_TEXT",
			"}).Add(_bot.watcher, ctx);"
		]
	},
	"CustomSelectionPrompt":{
		"prefix": "customsel",
		"body": [
			"var SelectionResult = await PromptCustomSelection($0);",
			"",
			"if (SelectionResult.TimedOut)",
			"{",
			"    ModifyToTimedOut(true);",
			"    return;",
			"}",
			"else if (SelectionResult.Cancelled)",
			"{",
			"    await ExecuteCommand(ctx, arguments);",
			"    return;",
			"}",
			"else if (SelectionResult.Errored)",
			"{",
			"    throw SelectionResult.Exception;",
			"}",
		]
	},
	"RoleSelectionPromopt": {
		"prefix": "rolesel",
		"body": [
			"var RoleResult = await PromptRoleSelection();",
			"",
			"if (RoleResult.TimedOut)",
			"{",
			"    ModifyToTimedOut();",
			"    return;",
			"}",
			"else if (RoleResult.Cancelled)",
			"{",
			"    await ExecuteCommand(ctx, arguments);",
			"    return;",
			"}",
			"else if (RoleResult.Failed)",
			"{",
			"    if (RoleResult.Exception.GetType() == typeof(NullReferenceException))",
			"    {",
			"        await RespondOrEdit(new DiscordEmbedBuilder().SetError(ctx).WithDescription(\"`Could not find any roles in your server.`\"));",
			"        await Task.Delay(3000);",
			"        return;",
			"    }",
			"",
			"    throw RoleResult.Exception;",
			"}",
		]
	},
	"ChannelSelectionPrompt": {
		"prefix": "channelsel",
		"body": [
			"var ChannelResult = await PromptChannelSelection();",
			"",
			"if (ChannelResult.TimedOut)",
			"{",
			"    ModifyToTimedOut(true);",
			"    return;",
			"}",
			"else if (ChannelResult.Cancelled)",
			"{",
			"    await ExecuteCommand(ctx, arguments);",
			"    return;",
			"}",
			"else if (ChannelResult.Failed)",
			"{",
			"    if (ChannelResult.Exception.GetType() == typeof(NullReferenceException))",
			"    {",
			"        await RespondOrEdit(new DiscordEmbedBuilder().SetError(ctx).WithDescription(\"`Could not find any _ channels in your server.`\"));",
			"        await Task.Delay(3000);",
			"        await ExecuteCommand(ctx, arguments);",
			"        return;",
			"    }",
			"",
			"    throw ChannelResult.Exception;",
			"}",
		]
	},
	"ModalPrompt": {
		"prefix": "modal",
		"body": [
				"var ModalResult = await PromptModalWithRetry();",
				"",
				"if (ModalResult.TimedOut)",
				"{",
				"    ModifyToTimedOut(true);",
				"    return;",
				"}",
				"else if (ModalResult.Cancelled)",
				"{",
				"    await ExecuteCommand(ctx, arguments);",
				"    return;",
				"}",
				"else if (ModalResult.Errored)",
				"{",
				"    throw ModalResult.Exception;",
				"}",
		]
	}
}